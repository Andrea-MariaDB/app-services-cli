// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package srsdata

import (
	_context "context"
	_nethttp "net/http"
	"os"
	"sync"
)

// Ensure, that ArtifactsApiMock does implement ArtifactsApi.
// If this is not the case, regenerate this file with moq.
var _ ArtifactsApi = &ArtifactsApiMock{}

// ArtifactsApiMock is a mock implementation of ArtifactsApi.
//
// 	func TestSomethingThatUsesArtifactsApi(t *testing.T) {
//
// 		// make and configure a mocked ArtifactsApi
// 		mockedArtifactsApi := &ArtifactsApiMock{
// 			CreateArtifactFunc: func(ctx _context.Context, groupId string) ApiCreateArtifactRequest {
// 				panic("mock out the CreateArtifact method")
// 			},
// 			CreateArtifactExecuteFunc: func(r ApiCreateArtifactRequest) (ArtifactMetaData, *_nethttp.Response, error) {
// 				panic("mock out the CreateArtifactExecute method")
// 			},
// 			DeleteArtifactFunc: func(ctx _context.Context, groupId string, artifactId string) ApiDeleteArtifactRequest {
// 				panic("mock out the DeleteArtifact method")
// 			},
// 			DeleteArtifactExecuteFunc: func(r ApiDeleteArtifactRequest) (*_nethttp.Response, error) {
// 				panic("mock out the DeleteArtifactExecute method")
// 			},
// 			DeleteArtifactsInGroupFunc: func(ctx _context.Context, groupId string) ApiDeleteArtifactsInGroupRequest {
// 				panic("mock out the DeleteArtifactsInGroup method")
// 			},
// 			DeleteArtifactsInGroupExecuteFunc: func(r ApiDeleteArtifactsInGroupRequest) (*_nethttp.Response, error) {
// 				panic("mock out the DeleteArtifactsInGroupExecute method")
// 			},
// 			GetContentByIdFunc: func(ctx _context.Context, contentId int64) ApiGetContentByIdRequest {
// 				panic("mock out the GetContentById method")
// 			},
// 			GetContentByIdExecuteFunc: func(r ApiGetContentByIdRequest) (*os.File, *_nethttp.Response, error) {
// 				panic("mock out the GetContentByIdExecute method")
// 			},
// 			GetLatestArtifactFunc: func(ctx _context.Context, groupId string, artifactId string) ApiGetLatestArtifactRequest {
// 				panic("mock out the GetLatestArtifact method")
// 			},
// 			GetLatestArtifactExecuteFunc: func(r ApiGetLatestArtifactRequest) (*os.File, *_nethttp.Response, error) {
// 				panic("mock out the GetLatestArtifactExecute method")
// 			},
// 			ListArtifactsInGroupFunc: func(ctx _context.Context, groupId string) ApiListArtifactsInGroupRequest {
// 				panic("mock out the ListArtifactsInGroup method")
// 			},
// 			ListArtifactsInGroupExecuteFunc: func(r ApiListArtifactsInGroupRequest) (ArtifactSearchResults, *_nethttp.Response, error) {
// 				panic("mock out the ListArtifactsInGroupExecute method")
// 			},
// 			UpdateArtifactFunc: func(ctx _context.Context, groupId string, artifactId string) ApiUpdateArtifactRequest {
// 				panic("mock out the UpdateArtifact method")
// 			},
// 			UpdateArtifactExecuteFunc: func(r ApiUpdateArtifactRequest) (ArtifactMetaData, *_nethttp.Response, error) {
// 				panic("mock out the UpdateArtifactExecute method")
// 			},
// 		}
//
// 		// use mockedArtifactsApi in code that requires ArtifactsApi
// 		// and then make assertions.
//
// 	}
type ArtifactsApiMock struct {
	// CreateArtifactFunc mocks the CreateArtifact method.
	CreateArtifactFunc func(ctx _context.Context, groupId string) ApiCreateArtifactRequest

	// CreateArtifactExecuteFunc mocks the CreateArtifactExecute method.
	CreateArtifactExecuteFunc func(r ApiCreateArtifactRequest) (ArtifactMetaData, *_nethttp.Response, error)

	// DeleteArtifactFunc mocks the DeleteArtifact method.
	DeleteArtifactFunc func(ctx _context.Context, groupId string, artifactId string) ApiDeleteArtifactRequest

	// DeleteArtifactExecuteFunc mocks the DeleteArtifactExecute method.
	DeleteArtifactExecuteFunc func(r ApiDeleteArtifactRequest) (*_nethttp.Response, error)

	// DeleteArtifactsInGroupFunc mocks the DeleteArtifactsInGroup method.
	DeleteArtifactsInGroupFunc func(ctx _context.Context, groupId string) ApiDeleteArtifactsInGroupRequest

	// DeleteArtifactsInGroupExecuteFunc mocks the DeleteArtifactsInGroupExecute method.
	DeleteArtifactsInGroupExecuteFunc func(r ApiDeleteArtifactsInGroupRequest) (*_nethttp.Response, error)

	// GetContentByIdFunc mocks the GetContentById method.
	GetContentByIdFunc func(ctx _context.Context, contentId int64) ApiGetContentByIdRequest

	// GetContentByIdExecuteFunc mocks the GetContentByIdExecute method.
	GetContentByIdExecuteFunc func(r ApiGetContentByIdRequest) (*os.File, *_nethttp.Response, error)

	// GetLatestArtifactFunc mocks the GetLatestArtifact method.
	GetLatestArtifactFunc func(ctx _context.Context, groupId string, artifactId string) ApiGetLatestArtifactRequest

	// GetLatestArtifactExecuteFunc mocks the GetLatestArtifactExecute method.
	GetLatestArtifactExecuteFunc func(r ApiGetLatestArtifactRequest) (*os.File, *_nethttp.Response, error)

	// ListArtifactsInGroupFunc mocks the ListArtifactsInGroup method.
	ListArtifactsInGroupFunc func(ctx _context.Context, groupId string) ApiListArtifactsInGroupRequest

	// ListArtifactsInGroupExecuteFunc mocks the ListArtifactsInGroupExecute method.
	ListArtifactsInGroupExecuteFunc func(r ApiListArtifactsInGroupRequest) (ArtifactSearchResults, *_nethttp.Response, error)

	// UpdateArtifactFunc mocks the UpdateArtifact method.
	UpdateArtifactFunc func(ctx _context.Context, groupId string, artifactId string) ApiUpdateArtifactRequest

	// UpdateArtifactExecuteFunc mocks the UpdateArtifactExecute method.
	UpdateArtifactExecuteFunc func(r ApiUpdateArtifactRequest) (ArtifactMetaData, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateArtifact holds details about calls to the CreateArtifact method.
		CreateArtifact []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
		}
		// CreateArtifactExecute holds details about calls to the CreateArtifactExecute method.
		CreateArtifactExecute []struct {
			// R is the r argument value.
			R ApiCreateArtifactRequest
		}
		// DeleteArtifact holds details about calls to the DeleteArtifact method.
		DeleteArtifact []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
		}
		// DeleteArtifactExecute holds details about calls to the DeleteArtifactExecute method.
		DeleteArtifactExecute []struct {
			// R is the r argument value.
			R ApiDeleteArtifactRequest
		}
		// DeleteArtifactsInGroup holds details about calls to the DeleteArtifactsInGroup method.
		DeleteArtifactsInGroup []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
		}
		// DeleteArtifactsInGroupExecute holds details about calls to the DeleteArtifactsInGroupExecute method.
		DeleteArtifactsInGroupExecute []struct {
			// R is the r argument value.
			R ApiDeleteArtifactsInGroupRequest
		}
		// GetContentById holds details about calls to the GetContentById method.
		GetContentById []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ContentId is the contentId argument value.
			ContentId int64
		}
		// GetContentByIdExecute holds details about calls to the GetContentByIdExecute method.
		GetContentByIdExecute []struct {
			// R is the r argument value.
			R ApiGetContentByIdRequest
		}
		// GetLatestArtifact holds details about calls to the GetLatestArtifact method.
		GetLatestArtifact []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
		}
		// GetLatestArtifactExecute holds details about calls to the GetLatestArtifactExecute method.
		GetLatestArtifactExecute []struct {
			// R is the r argument value.
			R ApiGetLatestArtifactRequest
		}
		// ListArtifactsInGroup holds details about calls to the ListArtifactsInGroup method.
		ListArtifactsInGroup []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
		}
		// ListArtifactsInGroupExecute holds details about calls to the ListArtifactsInGroupExecute method.
		ListArtifactsInGroupExecute []struct {
			// R is the r argument value.
			R ApiListArtifactsInGroupRequest
		}
		// UpdateArtifact holds details about calls to the UpdateArtifact method.
		UpdateArtifact []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// GroupId is the groupId argument value.
			GroupId string
			// ArtifactId is the artifactId argument value.
			ArtifactId string
		}
		// UpdateArtifactExecute holds details about calls to the UpdateArtifactExecute method.
		UpdateArtifactExecute []struct {
			// R is the r argument value.
			R ApiUpdateArtifactRequest
		}
	}
	lockCreateArtifact                sync.RWMutex
	lockCreateArtifactExecute         sync.RWMutex
	lockDeleteArtifact                sync.RWMutex
	lockDeleteArtifactExecute         sync.RWMutex
	lockDeleteArtifactsInGroup        sync.RWMutex
	lockDeleteArtifactsInGroupExecute sync.RWMutex
	lockGetContentById                sync.RWMutex
	lockGetContentByIdExecute         sync.RWMutex
	lockGetLatestArtifact             sync.RWMutex
	lockGetLatestArtifactExecute      sync.RWMutex
	lockListArtifactsInGroup          sync.RWMutex
	lockListArtifactsInGroupExecute   sync.RWMutex
	lockUpdateArtifact                sync.RWMutex
	lockUpdateArtifactExecute         sync.RWMutex
}

// CreateArtifact calls CreateArtifactFunc.
func (mock *ArtifactsApiMock) CreateArtifact(ctx _context.Context, groupId string) ApiCreateArtifactRequest {
	if mock.CreateArtifactFunc == nil {
		panic("ArtifactsApiMock.CreateArtifactFunc: method is nil but ArtifactsApi.CreateArtifact was just called")
	}
	callInfo := struct {
		Ctx     _context.Context
		GroupId string
	}{
		Ctx:     ctx,
		GroupId: groupId,
	}
	mock.lockCreateArtifact.Lock()
	mock.calls.CreateArtifact = append(mock.calls.CreateArtifact, callInfo)
	mock.lockCreateArtifact.Unlock()
	return mock.CreateArtifactFunc(ctx, groupId)
}

// CreateArtifactCalls gets all the calls that were made to CreateArtifact.
// Check the length with:
//     len(mockedArtifactsApi.CreateArtifactCalls())
func (mock *ArtifactsApiMock) CreateArtifactCalls() []struct {
	Ctx     _context.Context
	GroupId string
} {
	var calls []struct {
		Ctx     _context.Context
		GroupId string
	}
	mock.lockCreateArtifact.RLock()
	calls = mock.calls.CreateArtifact
	mock.lockCreateArtifact.RUnlock()
	return calls
}

// CreateArtifactExecute calls CreateArtifactExecuteFunc.
func (mock *ArtifactsApiMock) CreateArtifactExecute(r ApiCreateArtifactRequest) (ArtifactMetaData, *_nethttp.Response, error) {
	if mock.CreateArtifactExecuteFunc == nil {
		panic("ArtifactsApiMock.CreateArtifactExecuteFunc: method is nil but ArtifactsApi.CreateArtifactExecute was just called")
	}
	callInfo := struct {
		R ApiCreateArtifactRequest
	}{
		R: r,
	}
	mock.lockCreateArtifactExecute.Lock()
	mock.calls.CreateArtifactExecute = append(mock.calls.CreateArtifactExecute, callInfo)
	mock.lockCreateArtifactExecute.Unlock()
	return mock.CreateArtifactExecuteFunc(r)
}

// CreateArtifactExecuteCalls gets all the calls that were made to CreateArtifactExecute.
// Check the length with:
//     len(mockedArtifactsApi.CreateArtifactExecuteCalls())
func (mock *ArtifactsApiMock) CreateArtifactExecuteCalls() []struct {
	R ApiCreateArtifactRequest
} {
	var calls []struct {
		R ApiCreateArtifactRequest
	}
	mock.lockCreateArtifactExecute.RLock()
	calls = mock.calls.CreateArtifactExecute
	mock.lockCreateArtifactExecute.RUnlock()
	return calls
}

// DeleteArtifact calls DeleteArtifactFunc.
func (mock *ArtifactsApiMock) DeleteArtifact(ctx _context.Context, groupId string, artifactId string) ApiDeleteArtifactRequest {
	if mock.DeleteArtifactFunc == nil {
		panic("ArtifactsApiMock.DeleteArtifactFunc: method is nil but ArtifactsApi.DeleteArtifact was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
	}
	mock.lockDeleteArtifact.Lock()
	mock.calls.DeleteArtifact = append(mock.calls.DeleteArtifact, callInfo)
	mock.lockDeleteArtifact.Unlock()
	return mock.DeleteArtifactFunc(ctx, groupId, artifactId)
}

// DeleteArtifactCalls gets all the calls that were made to DeleteArtifact.
// Check the length with:
//     len(mockedArtifactsApi.DeleteArtifactCalls())
func (mock *ArtifactsApiMock) DeleteArtifactCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}
	mock.lockDeleteArtifact.RLock()
	calls = mock.calls.DeleteArtifact
	mock.lockDeleteArtifact.RUnlock()
	return calls
}

// DeleteArtifactExecute calls DeleteArtifactExecuteFunc.
func (mock *ArtifactsApiMock) DeleteArtifactExecute(r ApiDeleteArtifactRequest) (*_nethttp.Response, error) {
	if mock.DeleteArtifactExecuteFunc == nil {
		panic("ArtifactsApiMock.DeleteArtifactExecuteFunc: method is nil but ArtifactsApi.DeleteArtifactExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteArtifactRequest
	}{
		R: r,
	}
	mock.lockDeleteArtifactExecute.Lock()
	mock.calls.DeleteArtifactExecute = append(mock.calls.DeleteArtifactExecute, callInfo)
	mock.lockDeleteArtifactExecute.Unlock()
	return mock.DeleteArtifactExecuteFunc(r)
}

// DeleteArtifactExecuteCalls gets all the calls that were made to DeleteArtifactExecute.
// Check the length with:
//     len(mockedArtifactsApi.DeleteArtifactExecuteCalls())
func (mock *ArtifactsApiMock) DeleteArtifactExecuteCalls() []struct {
	R ApiDeleteArtifactRequest
} {
	var calls []struct {
		R ApiDeleteArtifactRequest
	}
	mock.lockDeleteArtifactExecute.RLock()
	calls = mock.calls.DeleteArtifactExecute
	mock.lockDeleteArtifactExecute.RUnlock()
	return calls
}

// DeleteArtifactsInGroup calls DeleteArtifactsInGroupFunc.
func (mock *ArtifactsApiMock) DeleteArtifactsInGroup(ctx _context.Context, groupId string) ApiDeleteArtifactsInGroupRequest {
	if mock.DeleteArtifactsInGroupFunc == nil {
		panic("ArtifactsApiMock.DeleteArtifactsInGroupFunc: method is nil but ArtifactsApi.DeleteArtifactsInGroup was just called")
	}
	callInfo := struct {
		Ctx     _context.Context
		GroupId string
	}{
		Ctx:     ctx,
		GroupId: groupId,
	}
	mock.lockDeleteArtifactsInGroup.Lock()
	mock.calls.DeleteArtifactsInGroup = append(mock.calls.DeleteArtifactsInGroup, callInfo)
	mock.lockDeleteArtifactsInGroup.Unlock()
	return mock.DeleteArtifactsInGroupFunc(ctx, groupId)
}

// DeleteArtifactsInGroupCalls gets all the calls that were made to DeleteArtifactsInGroup.
// Check the length with:
//     len(mockedArtifactsApi.DeleteArtifactsInGroupCalls())
func (mock *ArtifactsApiMock) DeleteArtifactsInGroupCalls() []struct {
	Ctx     _context.Context
	GroupId string
} {
	var calls []struct {
		Ctx     _context.Context
		GroupId string
	}
	mock.lockDeleteArtifactsInGroup.RLock()
	calls = mock.calls.DeleteArtifactsInGroup
	mock.lockDeleteArtifactsInGroup.RUnlock()
	return calls
}

// DeleteArtifactsInGroupExecute calls DeleteArtifactsInGroupExecuteFunc.
func (mock *ArtifactsApiMock) DeleteArtifactsInGroupExecute(r ApiDeleteArtifactsInGroupRequest) (*_nethttp.Response, error) {
	if mock.DeleteArtifactsInGroupExecuteFunc == nil {
		panic("ArtifactsApiMock.DeleteArtifactsInGroupExecuteFunc: method is nil but ArtifactsApi.DeleteArtifactsInGroupExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteArtifactsInGroupRequest
	}{
		R: r,
	}
	mock.lockDeleteArtifactsInGroupExecute.Lock()
	mock.calls.DeleteArtifactsInGroupExecute = append(mock.calls.DeleteArtifactsInGroupExecute, callInfo)
	mock.lockDeleteArtifactsInGroupExecute.Unlock()
	return mock.DeleteArtifactsInGroupExecuteFunc(r)
}

// DeleteArtifactsInGroupExecuteCalls gets all the calls that were made to DeleteArtifactsInGroupExecute.
// Check the length with:
//     len(mockedArtifactsApi.DeleteArtifactsInGroupExecuteCalls())
func (mock *ArtifactsApiMock) DeleteArtifactsInGroupExecuteCalls() []struct {
	R ApiDeleteArtifactsInGroupRequest
} {
	var calls []struct {
		R ApiDeleteArtifactsInGroupRequest
	}
	mock.lockDeleteArtifactsInGroupExecute.RLock()
	calls = mock.calls.DeleteArtifactsInGroupExecute
	mock.lockDeleteArtifactsInGroupExecute.RUnlock()
	return calls
}

// GetContentById calls GetContentByIdFunc.
func (mock *ArtifactsApiMock) GetContentById(ctx _context.Context, contentId int64) ApiGetContentByIdRequest {
	if mock.GetContentByIdFunc == nil {
		panic("ArtifactsApiMock.GetContentByIdFunc: method is nil but ArtifactsApi.GetContentById was just called")
	}
	callInfo := struct {
		Ctx       _context.Context
		ContentId int64
	}{
		Ctx:       ctx,
		ContentId: contentId,
	}
	mock.lockGetContentById.Lock()
	mock.calls.GetContentById = append(mock.calls.GetContentById, callInfo)
	mock.lockGetContentById.Unlock()
	return mock.GetContentByIdFunc(ctx, contentId)
}

// GetContentByIdCalls gets all the calls that were made to GetContentById.
// Check the length with:
//     len(mockedArtifactsApi.GetContentByIdCalls())
func (mock *ArtifactsApiMock) GetContentByIdCalls() []struct {
	Ctx       _context.Context
	ContentId int64
} {
	var calls []struct {
		Ctx       _context.Context
		ContentId int64
	}
	mock.lockGetContentById.RLock()
	calls = mock.calls.GetContentById
	mock.lockGetContentById.RUnlock()
	return calls
}

// GetContentByIdExecute calls GetContentByIdExecuteFunc.
func (mock *ArtifactsApiMock) GetContentByIdExecute(r ApiGetContentByIdRequest) (*os.File, *_nethttp.Response, error) {
	if mock.GetContentByIdExecuteFunc == nil {
		panic("ArtifactsApiMock.GetContentByIdExecuteFunc: method is nil but ArtifactsApi.GetContentByIdExecute was just called")
	}
	callInfo := struct {
		R ApiGetContentByIdRequest
	}{
		R: r,
	}
	mock.lockGetContentByIdExecute.Lock()
	mock.calls.GetContentByIdExecute = append(mock.calls.GetContentByIdExecute, callInfo)
	mock.lockGetContentByIdExecute.Unlock()
	return mock.GetContentByIdExecuteFunc(r)
}

// GetContentByIdExecuteCalls gets all the calls that were made to GetContentByIdExecute.
// Check the length with:
//     len(mockedArtifactsApi.GetContentByIdExecuteCalls())
func (mock *ArtifactsApiMock) GetContentByIdExecuteCalls() []struct {
	R ApiGetContentByIdRequest
} {
	var calls []struct {
		R ApiGetContentByIdRequest
	}
	mock.lockGetContentByIdExecute.RLock()
	calls = mock.calls.GetContentByIdExecute
	mock.lockGetContentByIdExecute.RUnlock()
	return calls
}

// GetLatestArtifact calls GetLatestArtifactFunc.
func (mock *ArtifactsApiMock) GetLatestArtifact(ctx _context.Context, groupId string, artifactId string) ApiGetLatestArtifactRequest {
	if mock.GetLatestArtifactFunc == nil {
		panic("ArtifactsApiMock.GetLatestArtifactFunc: method is nil but ArtifactsApi.GetLatestArtifact was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
	}
	mock.lockGetLatestArtifact.Lock()
	mock.calls.GetLatestArtifact = append(mock.calls.GetLatestArtifact, callInfo)
	mock.lockGetLatestArtifact.Unlock()
	return mock.GetLatestArtifactFunc(ctx, groupId, artifactId)
}

// GetLatestArtifactCalls gets all the calls that were made to GetLatestArtifact.
// Check the length with:
//     len(mockedArtifactsApi.GetLatestArtifactCalls())
func (mock *ArtifactsApiMock) GetLatestArtifactCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}
	mock.lockGetLatestArtifact.RLock()
	calls = mock.calls.GetLatestArtifact
	mock.lockGetLatestArtifact.RUnlock()
	return calls
}

// GetLatestArtifactExecute calls GetLatestArtifactExecuteFunc.
func (mock *ArtifactsApiMock) GetLatestArtifactExecute(r ApiGetLatestArtifactRequest) (*os.File, *_nethttp.Response, error) {
	if mock.GetLatestArtifactExecuteFunc == nil {
		panic("ArtifactsApiMock.GetLatestArtifactExecuteFunc: method is nil but ArtifactsApi.GetLatestArtifactExecute was just called")
	}
	callInfo := struct {
		R ApiGetLatestArtifactRequest
	}{
		R: r,
	}
	mock.lockGetLatestArtifactExecute.Lock()
	mock.calls.GetLatestArtifactExecute = append(mock.calls.GetLatestArtifactExecute, callInfo)
	mock.lockGetLatestArtifactExecute.Unlock()
	return mock.GetLatestArtifactExecuteFunc(r)
}

// GetLatestArtifactExecuteCalls gets all the calls that were made to GetLatestArtifactExecute.
// Check the length with:
//     len(mockedArtifactsApi.GetLatestArtifactExecuteCalls())
func (mock *ArtifactsApiMock) GetLatestArtifactExecuteCalls() []struct {
	R ApiGetLatestArtifactRequest
} {
	var calls []struct {
		R ApiGetLatestArtifactRequest
	}
	mock.lockGetLatestArtifactExecute.RLock()
	calls = mock.calls.GetLatestArtifactExecute
	mock.lockGetLatestArtifactExecute.RUnlock()
	return calls
}

// ListArtifactsInGroup calls ListArtifactsInGroupFunc.
func (mock *ArtifactsApiMock) ListArtifactsInGroup(ctx _context.Context, groupId string) ApiListArtifactsInGroupRequest {
	if mock.ListArtifactsInGroupFunc == nil {
		panic("ArtifactsApiMock.ListArtifactsInGroupFunc: method is nil but ArtifactsApi.ListArtifactsInGroup was just called")
	}
	callInfo := struct {
		Ctx     _context.Context
		GroupId string
	}{
		Ctx:     ctx,
		GroupId: groupId,
	}
	mock.lockListArtifactsInGroup.Lock()
	mock.calls.ListArtifactsInGroup = append(mock.calls.ListArtifactsInGroup, callInfo)
	mock.lockListArtifactsInGroup.Unlock()
	return mock.ListArtifactsInGroupFunc(ctx, groupId)
}

// ListArtifactsInGroupCalls gets all the calls that were made to ListArtifactsInGroup.
// Check the length with:
//     len(mockedArtifactsApi.ListArtifactsInGroupCalls())
func (mock *ArtifactsApiMock) ListArtifactsInGroupCalls() []struct {
	Ctx     _context.Context
	GroupId string
} {
	var calls []struct {
		Ctx     _context.Context
		GroupId string
	}
	mock.lockListArtifactsInGroup.RLock()
	calls = mock.calls.ListArtifactsInGroup
	mock.lockListArtifactsInGroup.RUnlock()
	return calls
}

// ListArtifactsInGroupExecute calls ListArtifactsInGroupExecuteFunc.
func (mock *ArtifactsApiMock) ListArtifactsInGroupExecute(r ApiListArtifactsInGroupRequest) (ArtifactSearchResults, *_nethttp.Response, error) {
	if mock.ListArtifactsInGroupExecuteFunc == nil {
		panic("ArtifactsApiMock.ListArtifactsInGroupExecuteFunc: method is nil but ArtifactsApi.ListArtifactsInGroupExecute was just called")
	}
	callInfo := struct {
		R ApiListArtifactsInGroupRequest
	}{
		R: r,
	}
	mock.lockListArtifactsInGroupExecute.Lock()
	mock.calls.ListArtifactsInGroupExecute = append(mock.calls.ListArtifactsInGroupExecute, callInfo)
	mock.lockListArtifactsInGroupExecute.Unlock()
	return mock.ListArtifactsInGroupExecuteFunc(r)
}

// ListArtifactsInGroupExecuteCalls gets all the calls that were made to ListArtifactsInGroupExecute.
// Check the length with:
//     len(mockedArtifactsApi.ListArtifactsInGroupExecuteCalls())
func (mock *ArtifactsApiMock) ListArtifactsInGroupExecuteCalls() []struct {
	R ApiListArtifactsInGroupRequest
} {
	var calls []struct {
		R ApiListArtifactsInGroupRequest
	}
	mock.lockListArtifactsInGroupExecute.RLock()
	calls = mock.calls.ListArtifactsInGroupExecute
	mock.lockListArtifactsInGroupExecute.RUnlock()
	return calls
}

// UpdateArtifact calls UpdateArtifactFunc.
func (mock *ArtifactsApiMock) UpdateArtifact(ctx _context.Context, groupId string, artifactId string) ApiUpdateArtifactRequest {
	if mock.UpdateArtifactFunc == nil {
		panic("ArtifactsApiMock.UpdateArtifactFunc: method is nil but ArtifactsApi.UpdateArtifact was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}{
		Ctx:        ctx,
		GroupId:    groupId,
		ArtifactId: artifactId,
	}
	mock.lockUpdateArtifact.Lock()
	mock.calls.UpdateArtifact = append(mock.calls.UpdateArtifact, callInfo)
	mock.lockUpdateArtifact.Unlock()
	return mock.UpdateArtifactFunc(ctx, groupId, artifactId)
}

// UpdateArtifactCalls gets all the calls that were made to UpdateArtifact.
// Check the length with:
//     len(mockedArtifactsApi.UpdateArtifactCalls())
func (mock *ArtifactsApiMock) UpdateArtifactCalls() []struct {
	Ctx        _context.Context
	GroupId    string
	ArtifactId string
} {
	var calls []struct {
		Ctx        _context.Context
		GroupId    string
		ArtifactId string
	}
	mock.lockUpdateArtifact.RLock()
	calls = mock.calls.UpdateArtifact
	mock.lockUpdateArtifact.RUnlock()
	return calls
}

// UpdateArtifactExecute calls UpdateArtifactExecuteFunc.
func (mock *ArtifactsApiMock) UpdateArtifactExecute(r ApiUpdateArtifactRequest) (ArtifactMetaData, *_nethttp.Response, error) {
	if mock.UpdateArtifactExecuteFunc == nil {
		panic("ArtifactsApiMock.UpdateArtifactExecuteFunc: method is nil but ArtifactsApi.UpdateArtifactExecute was just called")
	}
	callInfo := struct {
		R ApiUpdateArtifactRequest
	}{
		R: r,
	}
	mock.lockUpdateArtifactExecute.Lock()
	mock.calls.UpdateArtifactExecute = append(mock.calls.UpdateArtifactExecute, callInfo)
	mock.lockUpdateArtifactExecute.Unlock()
	return mock.UpdateArtifactExecuteFunc(r)
}

// UpdateArtifactExecuteCalls gets all the calls that were made to UpdateArtifactExecute.
// Check the length with:
//     len(mockedArtifactsApi.UpdateArtifactExecuteCalls())
func (mock *ArtifactsApiMock) UpdateArtifactExecuteCalls() []struct {
	R ApiUpdateArtifactRequest
} {
	var calls []struct {
		R ApiUpdateArtifactRequest
	}
	mock.lockUpdateArtifactExecute.RLock()
	calls = mock.calls.UpdateArtifactExecute
	mock.lockUpdateArtifactExecute.RUnlock()
	return calls
}
