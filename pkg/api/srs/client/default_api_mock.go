// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package srsclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that DefaultApiMock does implement DefaultApi.
// If this is not the case, regenerate this file with moq.
var _ DefaultApi = &DefaultApiMock{}

// DefaultApiMock is a mock implementation of DefaultApi.
//
// 	func TestSomethingThatUsesDefaultApi(t *testing.T) {
//
// 		// make and configure a mocked DefaultApi
// 		mockedDefaultApi := &DefaultApiMock{
// 			CreateRegistryFunc: func(ctx _context.Context) ApiCreateRegistryRequest {
// 				panic("mock out the CreateRegistry method")
// 			},
// 			CreateRegistryExecuteFunc: func(r ApiCreateRegistryRequest) (Registry, *_nethttp.Response, error) {
// 				panic("mock out the CreateRegistryExecute method")
// 			},
// 			DeleteRegistryFunc: func(ctx _context.Context, registryId int32) ApiDeleteRegistryRequest {
// 				panic("mock out the DeleteRegistry method")
// 			},
// 			DeleteRegistryExecuteFunc: func(r ApiDeleteRegistryRequest) (*_nethttp.Response, error) {
// 				panic("mock out the DeleteRegistryExecute method")
// 			},
// 			GetRegistriesFunc: func(ctx _context.Context) ApiGetRegistriesRequest {
// 				panic("mock out the GetRegistries method")
// 			},
// 			GetRegistriesExecuteFunc: func(r ApiGetRegistriesRequest) ([]Registry, *_nethttp.Response, error) {
// 				panic("mock out the GetRegistriesExecute method")
// 			},
// 		}
//
// 		// use mockedDefaultApi in code that requires DefaultApi
// 		// and then make assertions.
//
// 	}
type DefaultApiMock struct {
	// CreateRegistryFunc mocks the CreateRegistry method.
	CreateRegistryFunc func(ctx _context.Context) ApiCreateRegistryRequest

	// CreateRegistryExecuteFunc mocks the CreateRegistryExecute method.
	CreateRegistryExecuteFunc func(r ApiCreateRegistryRequest) (Registry, *_nethttp.Response, error)

	// DeleteRegistryFunc mocks the DeleteRegistry method.
	DeleteRegistryFunc func(ctx _context.Context, registryId int32) ApiDeleteRegistryRequest

	// DeleteRegistryExecuteFunc mocks the DeleteRegistryExecute method.
	DeleteRegistryExecuteFunc func(r ApiDeleteRegistryRequest) (*_nethttp.Response, error)

	// GetRegistriesFunc mocks the GetRegistries method.
	GetRegistriesFunc func(ctx _context.Context) ApiGetRegistriesRequest

	// GetRegistriesExecuteFunc mocks the GetRegistriesExecute method.
	GetRegistriesExecuteFunc func(r ApiGetRegistriesRequest) ([]Registry, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateRegistry holds details about calls to the CreateRegistry method.
		CreateRegistry []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// CreateRegistryExecute holds details about calls to the CreateRegistryExecute method.
		CreateRegistryExecute []struct {
			// R is the r argument value.
			R ApiCreateRegistryRequest
		}
		// DeleteRegistry holds details about calls to the DeleteRegistry method.
		DeleteRegistry []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// RegistryId is the registryId argument value.
			RegistryId int32
		}
		// DeleteRegistryExecute holds details about calls to the DeleteRegistryExecute method.
		DeleteRegistryExecute []struct {
			// R is the r argument value.
			R ApiDeleteRegistryRequest
		}
		// GetRegistries holds details about calls to the GetRegistries method.
		GetRegistries []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
		}
		// GetRegistriesExecute holds details about calls to the GetRegistriesExecute method.
		GetRegistriesExecute []struct {
			// R is the r argument value.
			R ApiGetRegistriesRequest
		}
	}
	lockCreateRegistry        sync.RWMutex
	lockCreateRegistryExecute sync.RWMutex
	lockDeleteRegistry        sync.RWMutex
	lockDeleteRegistryExecute sync.RWMutex
	lockGetRegistries         sync.RWMutex
	lockGetRegistriesExecute  sync.RWMutex
}

// CreateRegistry calls CreateRegistryFunc.
func (mock *DefaultApiMock) CreateRegistry(ctx _context.Context) ApiCreateRegistryRequest {
	if mock.CreateRegistryFunc == nil {
		panic("DefaultApiMock.CreateRegistryFunc: method is nil but DefaultApi.CreateRegistry was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCreateRegistry.Lock()
	mock.calls.CreateRegistry = append(mock.calls.CreateRegistry, callInfo)
	mock.lockCreateRegistry.Unlock()
	return mock.CreateRegistryFunc(ctx)
}

// CreateRegistryCalls gets all the calls that were made to CreateRegistry.
// Check the length with:
//     len(mockedDefaultApi.CreateRegistryCalls())
func (mock *DefaultApiMock) CreateRegistryCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockCreateRegistry.RLock()
	calls = mock.calls.CreateRegistry
	mock.lockCreateRegistry.RUnlock()
	return calls
}

// CreateRegistryExecute calls CreateRegistryExecuteFunc.
func (mock *DefaultApiMock) CreateRegistryExecute(r ApiCreateRegistryRequest) (Registry, *_nethttp.Response, error) {
	if mock.CreateRegistryExecuteFunc == nil {
		panic("DefaultApiMock.CreateRegistryExecuteFunc: method is nil but DefaultApi.CreateRegistryExecute was just called")
	}
	callInfo := struct {
		R ApiCreateRegistryRequest
	}{
		R: r,
	}
	mock.lockCreateRegistryExecute.Lock()
	mock.calls.CreateRegistryExecute = append(mock.calls.CreateRegistryExecute, callInfo)
	mock.lockCreateRegistryExecute.Unlock()
	return mock.CreateRegistryExecuteFunc(r)
}

// CreateRegistryExecuteCalls gets all the calls that were made to CreateRegistryExecute.
// Check the length with:
//     len(mockedDefaultApi.CreateRegistryExecuteCalls())
func (mock *DefaultApiMock) CreateRegistryExecuteCalls() []struct {
	R ApiCreateRegistryRequest
} {
	var calls []struct {
		R ApiCreateRegistryRequest
	}
	mock.lockCreateRegistryExecute.RLock()
	calls = mock.calls.CreateRegistryExecute
	mock.lockCreateRegistryExecute.RUnlock()
	return calls
}

// DeleteRegistry calls DeleteRegistryFunc.
func (mock *DefaultApiMock) DeleteRegistry(ctx _context.Context, registryId int32) ApiDeleteRegistryRequest {
	if mock.DeleteRegistryFunc == nil {
		panic("DefaultApiMock.DeleteRegistryFunc: method is nil but DefaultApi.DeleteRegistry was just called")
	}
	callInfo := struct {
		Ctx        _context.Context
		RegistryId int32
	}{
		Ctx:        ctx,
		RegistryId: registryId,
	}
	mock.lockDeleteRegistry.Lock()
	mock.calls.DeleteRegistry = append(mock.calls.DeleteRegistry, callInfo)
	mock.lockDeleteRegistry.Unlock()
	return mock.DeleteRegistryFunc(ctx, registryId)
}

// DeleteRegistryCalls gets all the calls that were made to DeleteRegistry.
// Check the length with:
//     len(mockedDefaultApi.DeleteRegistryCalls())
func (mock *DefaultApiMock) DeleteRegistryCalls() []struct {
	Ctx        _context.Context
	RegistryId int32
} {
	var calls []struct {
		Ctx        _context.Context
		RegistryId int32
	}
	mock.lockDeleteRegistry.RLock()
	calls = mock.calls.DeleteRegistry
	mock.lockDeleteRegistry.RUnlock()
	return calls
}

// DeleteRegistryExecute calls DeleteRegistryExecuteFunc.
func (mock *DefaultApiMock) DeleteRegistryExecute(r ApiDeleteRegistryRequest) (*_nethttp.Response, error) {
	if mock.DeleteRegistryExecuteFunc == nil {
		panic("DefaultApiMock.DeleteRegistryExecuteFunc: method is nil but DefaultApi.DeleteRegistryExecute was just called")
	}
	callInfo := struct {
		R ApiDeleteRegistryRequest
	}{
		R: r,
	}
	mock.lockDeleteRegistryExecute.Lock()
	mock.calls.DeleteRegistryExecute = append(mock.calls.DeleteRegistryExecute, callInfo)
	mock.lockDeleteRegistryExecute.Unlock()
	return mock.DeleteRegistryExecuteFunc(r)
}

// DeleteRegistryExecuteCalls gets all the calls that were made to DeleteRegistryExecute.
// Check the length with:
//     len(mockedDefaultApi.DeleteRegistryExecuteCalls())
func (mock *DefaultApiMock) DeleteRegistryExecuteCalls() []struct {
	R ApiDeleteRegistryRequest
} {
	var calls []struct {
		R ApiDeleteRegistryRequest
	}
	mock.lockDeleteRegistryExecute.RLock()
	calls = mock.calls.DeleteRegistryExecute
	mock.lockDeleteRegistryExecute.RUnlock()
	return calls
}

// GetRegistries calls GetRegistriesFunc.
func (mock *DefaultApiMock) GetRegistries(ctx _context.Context) ApiGetRegistriesRequest {
	if mock.GetRegistriesFunc == nil {
		panic("DefaultApiMock.GetRegistriesFunc: method is nil but DefaultApi.GetRegistries was just called")
	}
	callInfo := struct {
		Ctx _context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetRegistries.Lock()
	mock.calls.GetRegistries = append(mock.calls.GetRegistries, callInfo)
	mock.lockGetRegistries.Unlock()
	return mock.GetRegistriesFunc(ctx)
}

// GetRegistriesCalls gets all the calls that were made to GetRegistries.
// Check the length with:
//     len(mockedDefaultApi.GetRegistriesCalls())
func (mock *DefaultApiMock) GetRegistriesCalls() []struct {
	Ctx _context.Context
} {
	var calls []struct {
		Ctx _context.Context
	}
	mock.lockGetRegistries.RLock()
	calls = mock.calls.GetRegistries
	mock.lockGetRegistries.RUnlock()
	return calls
}

// GetRegistriesExecute calls GetRegistriesExecuteFunc.
func (mock *DefaultApiMock) GetRegistriesExecute(r ApiGetRegistriesRequest) ([]Registry, *_nethttp.Response, error) {
	if mock.GetRegistriesExecuteFunc == nil {
		panic("DefaultApiMock.GetRegistriesExecuteFunc: method is nil but DefaultApi.GetRegistriesExecute was just called")
	}
	callInfo := struct {
		R ApiGetRegistriesRequest
	}{
		R: r,
	}
	mock.lockGetRegistriesExecute.Lock()
	mock.calls.GetRegistriesExecute = append(mock.calls.GetRegistriesExecute, callInfo)
	mock.lockGetRegistriesExecute.Unlock()
	return mock.GetRegistriesExecuteFunc(r)
}

// GetRegistriesExecuteCalls gets all the calls that were made to GetRegistriesExecute.
// Check the length with:
//     len(mockedDefaultApi.GetRegistriesExecuteCalls())
func (mock *DefaultApiMock) GetRegistriesExecuteCalls() []struct {
	R ApiGetRegistriesRequest
} {
	var calls []struct {
		R ApiGetRegistriesRequest
	}
	mock.lockGetRegistriesExecute.RLock()
	calls = mock.calls.GetRegistriesExecute
	mock.lockGetRegistriesExecute.RUnlock()
	return calls
}
